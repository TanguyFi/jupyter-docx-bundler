jobs:
- job: 'codestyle'
  pool:
    vmImage: 'Ubuntu-16.04'
  steps:
    - bash: echo "##vso[task.prependpath]/usr/share/miniconda/bin"
      displayName: Add conda to PATH
    - bash: sudo chown -R $USER /usr/share/miniconda
      displayName: Take ownership of conda installation
    - template: .azure-templates/conda.yml
    - script: conda install --yes --quiet flake8
      displayName: Install flake8
    - script: |
        source activate base
        flake8 . --max-line-length=99
      displayName: flake8
- job: 'linux'
  pool:
    vmImage: 'Ubuntu-16.04'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
    - bash: echo "##vso[task.prependpath]/usr/share/miniconda/bin"
      displayName: Add conda to PATH
    - bash: sudo chown -R $USER /usr/share/miniconda
      displayName: Take ownership of conda installation
    - template: .azure-templates/conda.yml
    - script: conda create --yes --quiet --name jupyter-docx-bundler-testing --file requirements.txt --file requirements_test.txt python=$(python.version)
      displayName: Create conda environment for testing
    - script: |
        source activate jupyter-docx-bundler-testing
        pytest . --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
      displayName: pytest
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
      condition: succeededOrFailed()
- job: 'macosx'
  pool:
    vmImage: 'macOS-10.13'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
    - bash: echo "##vso[task.prependpath]$CONDA/bin"
      displayName: Add conda to PATH
    - bash: sudo chown -R $USER $CONDA
      displayName: Take ownership of conda installation
    - template: .azure-templates/conda.yml
    - script: conda create --yes --quiet --name jupyter-docx-bundler-testing --file requirements.txt --file requirements_test.txt python=$(python.version)
      displayName: Create conda environment for testing
    - script: |
        source activate jupyter-docx-bundler-testing
        pytest . --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
      displayName: pytest
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
      condition: succeededOrFailed()
- job: 'windows'
  pool:
    vmImage: 'vs2017-win2016'
  strategy:
    matrix:
      Python36:
        python.version: '3.6'
      Python37:
        python.version: '3.7'
    maxParallel: 2
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
        architecture: 'x64'
    - powershell: Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
      displayName: Add conda to PATH
    - template: .azure-templates/conda.yml
    - script: conda create --yes --quiet --name jupyter-docx-bundler-testing --file requirements.txt --file requirements_test.txt python=$(python.version)
      displayName: Create conda environment for testing
    - script: |
        call activate jupyter-docx-bundler-testing
        pytest . --junitxml=junit/test-results.xml --cov=com --cov-report=xml --cov-report=html
      displayName: pytest
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: '$(Agent.OS) - $(Build.DefinitionName) - Python $(python.version)'
      condition: succeededOrFailed()
